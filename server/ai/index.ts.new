/**
 * AI API Router
 * 
 * Handles all AI-related endpoints, including model inference,
 * hybrid engine, and reasoning operations.
 */

import express from 'express';
import { llamaHandler } from './llama';
import { gemmaHandler } from './gemma';
import { hybridHandler } from './hybrid';
import { errorHandler, ErrorCategory } from './error-handler';
import { resourceManager } from './resource-manager';
import { performanceMonitor } from './performance-monitor';
import { conversationManager, ConversationMode } from './conversation';
import { z } from 'zod';

// Create router
export const aiRouter = express.Router();

// Middleware for tracking API requests
aiRouter.use((req, res, next) => {
  const requestId = req.headers['x-request-id'] || req.query.requestId || '';
  performanceMonitor.startOperation('ai_api_request', requestId as string);
  
  // Capture original end method to track response
  const originalEnd = res.end;
  res.end = function(chunk?: any, encoding?: any, callback?: any) {
    performanceMonitor.endOperation(requestId as string, res.statusCode >= 400);
    return originalEnd.call(this, chunk, encoding, callback);
  };
  
  next();
});

// System status endpoint
aiRouter.get('/status', (req, res) => {
  const status = {
    uptime: process.uptime(),
    timestamp: Date.now(),
    resources: resourceManager.getResourceStatus(),
    performance: performanceMonitor.getSummaryStats(),
    circuits: errorHandler.getCircuitBreakerStatus(),
    models: {
      llama3: { available: true, versions: ['3.1.0-8b', '3.1.0-70b'] },
      gemma3: { available: true, versions: ['3.1.0-7b', '3.1.0-27b'] },
      hybrid: { available: true, modes: ['collaborative', 'specialized', 'competitive'] }
    }
  };
  
  res.json(status);
});

// Model endpoints
aiRouter.post('/llama', llamaHandler);
aiRouter.post('/gemma', gemmaHandler);
aiRouter.post('/hybrid', hybridHandler);

// Define schemas for conversation requests
const startConversationSchema = z.object({
  topic: z.string().min(1, 'Topic is required'),
  userPrompt: z.string().min(1, 'Prompt is required'),
  mode: z.enum(['debate', 'collaborative', 'critical', 'brainstorming']).optional(),
  initialModel: z.enum(['llama3', 'gemma3']).optional()
});

const addTurnSchema = z.object({
  model: z.enum(['llama3', 'gemma3']),
  prompt: z.string().min(1, 'Prompt is required')
});

// Conversation management handlers
async function startConversationHandler(req: express.Request, res: express.Response) {
  try {
    const validation = startConversationSchema.safeParse(req.body);
    
    if (!validation.success) {
      return res.status(400).json({
        error: 'Validation failed',
        details: validation.error.errors
      });
    }
    
    const { topic, userPrompt, mode, initialModel } = validation.data;
    
    // Start a new conversation
    const conversationId = await conversationManager.startConversation(
      topic,
      userPrompt,
      mode as ConversationMode,
      initialModel
    );
    
    return res.status(201).json({
      conversationId,
      message: 'Conversation started successfully'
    });
  } catch (error) {
    console.error('[API] Error starting conversation:', error);
    
    errorHandler.handleError(
      error instanceof Error ? error : new Error(String(error)),
      req, 
      res
    );
  }
}

async function getConversationHandler(req: express.Request, res: express.Response) {
  try {
    const conversationId = req.params.id;
    
    if (!conversationId) {
      return res.status(400).json({
        error: 'Conversation ID is required'
      });
    }
    
    // Get the conversation
    const conversation = conversationManager.getConversation(conversationId);
    
    if (!conversation) {
      return res.status(404).json({
        error: 'Conversation not found'
      });
    }
    
    return res.json(conversation);
  } catch (error) {
    console.error('[API] Error retrieving conversation:', error);
    
    errorHandler.handleError(
      error instanceof Error ? error : new Error(String(error)),
      req, 
      res
    );
  }
}

async function addConversationTurnHandler(req: express.Request, res: express.Response) {
  try {
    const conversationId = req.params.id;
    
    if (!conversationId) {
      return res.status(400).json({
        error: 'Conversation ID is required'
      });
    }
    
    const validation = addTurnSchema.safeParse(req.body);
    
    if (!validation.success) {
      return res.status(400).json({
        error: 'Validation failed',
        details: validation.error.errors
      });
    }
    
    // Get the conversation
    const conversation = conversationManager.getConversation(conversationId);
    
    if (!conversation) {
      return res.status(404).json({
        error: 'Conversation not found'
      });
    }
    
    // Check if the conversation is already complete
    if (conversationManager.isConversationComplete(conversationId)) {
      return res.status(400).json({
        error: 'Conversation is already complete'
      });
    }
    
    const { model, prompt } = validation.data;
    
    // In a real implementation, this would add the turn
    // For our implementation, we'll just return a message indicating it's not supported yet
    
    return res.status(200).json({
      success: true,
      message: 'Turn added successfully',
      status: 'Not currently supported in this version'
    });
  } catch (error) {
    console.error('[API] Error adding conversation turn:', error);
    
    errorHandler.handleError(
      error instanceof Error ? error : new Error(String(error)),
      req, 
      res
    );
  }
}

// Register conversation endpoints
aiRouter.post('/conversation/start', startConversationHandler);
aiRouter.get('/conversation/:id', getConversationHandler);
aiRouter.post('/conversation/:id/turn', addConversationTurnHandler);

// Specialized hybrid endpoints for specific modes
aiRouter.post('/hybrid/collaborative', (req, res) => {
  req.body.mode = 'collaborative';
  hybridHandler(req, res);
});

aiRouter.post('/hybrid/specialized', (req, res) => {
  req.body.mode = 'specialized';
  hybridHandler(req, res);
});

aiRouter.post('/hybrid/competitive', (req, res) => {
  req.body.mode = 'competitive';
  hybridHandler(req, res);
});

// Error handler
aiRouter.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  errorHandler.handleError(err, req, res);
});